package com.fun.ui;

import com.fun.http.HttpServer;
import com.fun.mouse.server.MouseControllWebSocketServer;
import com.fun.utils.DateUtil;
import com.fun.utils.Language;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.InetSocketAddress;
import java.util.ResourceBundle;

/**
 * Created by yehuan on 2016/11/8.
 */
public class MouseFrame {
    private JTextField hostInput;
    private JTextField portInput;
    private JButton btn;
    private JScrollPane logScrollPane;
    private JPanel mainPanel;
    private JTextPane logPane;
    private JButton btnClear;
    private JLabel host;
    private JLabel port;
    private JLabel logLabel;

    private HttpServer server;
    private Thread httpServerThread;

    MouseControllWebSocketServer mouserServer;

    private String hostname;
    private static final int MOUSE_SERVER_PORT = 4444;

    public static void main(String[] args) {

        MouseFrame f = new MouseFrame();
        f.launch();
    }

    public void launch() {

        JFrame jFrame = new JFrame(Language.get("ui.title"));
        Image image;
        try {
            image = ImageIO.read(this.getClass().getResource("/webapp/mouse.png"));
            jFrame.setIconImage(image);
        } catch (IOException e) {
            e.printStackTrace();
        }
        jFrame.setContentPane(mainPanel);
        jFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        jFrame.pack();
        jFrame.setSize(800, 600);
        jFrame.setLocationRelativeTo(mainPanel);//居中
        jFrame.setVisible(true);

        MyListener listener = new MyListener();

        btn.setText(Language.get("ui.start"));
        btnClear.setText(Language.get("ui.clear"));
        btn.addActionListener(listener);
        btnClear.addActionListener(listener);

        host.setText(Language.get("ui.host"));
        port.setText(Language.get("ui.port"));
        logLabel.setText(Language.get("ui.log"));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 3, new Insets(5, 5, 5, 5), -1, -1));
        host = new JLabel();
        this.$$$loadLabelText$$$(host, this.$$$getMessageFromBundle$$$("language/zh_cn", "ui.host"));
        mainPanel.add(host, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hostInput = new JTextField();
        hostInput.setText("192.168.1.119");
        mainPanel.add(hostInput, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        portInput = new JTextField();
        portInput.setText("8080");
        mainPanel.add(portInput, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        port = new JLabel();
        this.$$$loadLabelText$$$(port, this.$$$getMessageFromBundle$$$("language/zh_cn", "ui.port"));
        mainPanel.add(port, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_EAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logLabel = new JLabel();
        logLabel.setText("日志");
        mainPanel.add(logLabel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHEAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        logScrollPane = new JScrollPane();
        mainPanel.add(logScrollPane, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        logPane = new JTextPane();
        logScrollPane.setViewportView(logPane);
        btn = new JButton();
        this.$$$loadButtonText$$$(btn, this.$$$getMessageFromBundle$$$("language/zh_cn", "ui.start"));
        mainPanel.add(btn, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnClear = new JButton();
        this.$$$loadButtonText$$$(btnClear, this.$$$getMessageFromBundle$$$("language/zh_cn", "ui.clear"));
        mainPanel.add(btnClear, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    public class MyListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {

            JButton button = (JButton) e.getSource();
            if (button == btn) {

                log("click the btn with text [ {} ]", button.getText());
                if (btn.getText().equals(Language.get("ui.start"))) { // 启动

                    hostname = hostInput.getText();
                    String portStr = portInput.getText();

                    hostname = hostname == null ? "192.168.1.119" : hostname;
                    int port = portStr == null ? 8080 : Integer.parseInt(portStr);

                    log("it't going to start httpserver on [ {} ] with port [ {} ]", hostname, port);
                    // to start http server
                    if (server == null) {
                        log("server is null");
                        server = new HttpServer(hostname, port);
                    }
                    if (httpServerThread == null) {
                        log("httpServerThread is null...");
                        httpServerThread = new Thread(server);
                        httpServerThread.start();
                    }
                    log("httpserver on [ {} ] with port [ {} ] started success", hostname, port);

                    // to start mouse server
                    log("it's going to start mouse controll server on [ {} ] ", hostname);

                    if (mouserServer == null) {
                        InetSocketAddress address = new InetSocketAddress(hostname, MOUSE_SERVER_PORT);
                        mouserServer = new MouseControllWebSocketServer(address);
                        mouserServer.start();
                    } else {
                        mouserServer.resume();
                    }
                    log("mouse controll server on [ {} ] started success", hostname);
                    log("open in mobile web browse with url:  http://{}:{}/socket.html", hostname, port);
                    btn.setText(Language.get("ui.stop"));

                } else {// 关闭

                    log("server on host [ {} ] is stopping ...", hostname);
                    // the mouse controll server can only start once
                    mouserServer.pause();
                    log("server on host [ {} ] is stoped", hostname);

                    btn.setText(Language.get("ui.start"));
                }
            } else if (button == btnClear) {
                logPane.setText("");
            } else {
                log("这是测试消息，source={}, ======  id={}", e.getSource(), e.getID());
            }
        }
    }

    public void log(String msg, Object... objs) {
        //设置字体大小
        SimpleAttributeSet attrset = new SimpleAttributeSet();
        StyleConstants.setFontSize(attrset, 12);
        //插入内容
        Document docs = logPane.getDocument();//获得文本对象
        msg = String.format(msg.replaceAll("\\{\\}", "%s"), objs);
        String insert = "[ " + DateUtil.currentDate() + " ]\t" + msg + "\n";
        try {
            docs.insertString(docs.getLength(), insert, attrset);//对文本进行追加
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
    }


}
